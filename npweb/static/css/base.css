/* Colors */

html {
    --colordef-light-bg-primary: white;
    --colordef-light-bg-primary-hover: hsl(280, 6%, 97%);
    --colordef-light-bg-secondary: hsl(280, 6%, 95%);

    --colordef-dark-bg-primary: black;
    --colordef-dark-bg-primary-hover: hsl(280, 6%, 14%);
    --colordef-dark-bg-secondary: hsl(280, 6%, 13%);

    /* We need different fully-transparent colors to avoid weird interpolations,
       e.g. in gradients */
    --colordef-light-bg-primary-transparent: hsla(0, 0%, 100%, 0.0);
    --colordef-light-bg-primary-semitransparent: hsla(0, 0%, 100%, 0.4);
    --colordef-light-bg-primary-slightlytransparent: hsla(0, 0%, 100%, 0.8);

    --colordef-dark-bg-primary-transparent: hsla(0, 0%, 0%, 0.0);
    --colordef-dark-bg-primary-semitransparent: hsla(0, 0%, 0%, 0.4);
    --colordef-dark-bg-primary-slightlytransparent: hsla(0, 0%, 0%, 0.8);

    --colordef-bg-media: hsl(280, 8%, 23%);

    --colordef-light-text-primary: hsl(280, 8%, 23%);

    --colordef-dark-text-primary: hsl(280, 8%, 92%);

    --colordef-light-text-secondary: hsl(247, 5%, 66%);
    --colordef-light-text-secondary-active: hsl(247, 5%, 60%);

    --colordef-dark-text-secondary: hsl(247, 5%, 60%);
    --colordef-dark-text-secondary-active: hsl(247, 5%, 54%);

    --colordef-tint: hsl(215, 100%, 61%);
    --colordef-tint-active: hsl(215, 100%, 55%);

    --color-tint: var(--colordef-tint);
    --color-tint-hover: var(--colordef-tint);
    --color-tint-active: var(--colordef-tint-active);

    color: var(--color-text-primary);
    background-color: var(--color-bg-primary);
}

html,
.lightmode
{
    --color-bg-primary: var(--colordef-light-bg-primary);
    --color-bg-primary-hover: var(--colordef-light-bg-primary-hover);
    --color-bg-primary-active: var(--colordef-light-bg-secondary);

    --color-bg-primary-transparent: var(--colordef-light-bg-primary-transparent);
    --color-bg-primary-semitransparent: var(--colordef-light-bg-primary-semitransparent);
    --color-bg-primary-slightlytransparent: var(--colordef-light-bg-primary-slightlytransparent);

    --color-bg-secondary: var(--colordef-light-bg-secondary);

    --color-text-primary: var(--colordef-light-text-primary);

    --color-text-secondary: var(--colordef-light-text-secondary);
    --color-text-secondary-hover: var(--colordef-light-text-secondary);
    --color-text-secondary-active: var(--colordef-light-text-secondary-active);

    /* Reset these when dark mode changes, as custom property values are
       calculated per-element - that is, a top-level color value inherited by
       children will not change with the child's custom property value */
    color: var(--color-text-primary);
    background-color: var(--color-bg-primary);
}

.darkmode,
.inversecolormode
{
    --color-bg-primary: var(--colordef-dark-bg-primary);
    --color-bg-primary-hover: var(--colordef-dark-bg-primary-hover);
    --color-bg-primary-active: var(--colordef-dark-bg-secondary);

    --color-bg-primary-transparent: var(--colordef-dark-bg-primary-transparent);
    --color-bg-primary-semitransparent: var(--colordef-dark-bg-primary-semitransparent);
    --color-bg-primary-slightlytransparent: var(--colordef-dark-bg-primary-slightlytransparent);

    --color-bg-secondary: var(--colordef-dark-bg-secondary);

    --color-text-primary: var(--colordef-dark-text-primary);

    --color-text-secondary: var(--colordef-dark-text-secondary);
    --color-text-secondary-hover: var(--colordef-dark-text-secondary);
    --color-text-secondary-active: var(--colordef-dark-text-secondary-active);

    color: var(--color-text-primary);
    background-color: var(--color-bg-primary);
}

/* Copies of the above, since we can't combine selectors with media queries */
@media (prefers-color-scheme: dark)
{
    html,
    .darkmode
    {
        --color-bg-primary: var(--colordef-dark-bg-primary);
        --color-bg-primary-hover: var(--colordef-dark-bg-primary-hover);
        --color-bg-primary-active: var(--colordef-dark-bg-secondary);

        --color-bg-primary-transparent: var(--colordef-dark-bg-primary-transparent);
        --color-bg-primary-semitransparent: var(--colordef-dark-bg-primary-semitransparent);
        --color-bg-primary-slightlytransparent: var(--colordef-dark-bg-primary-slightlytransparent);

        --color-bg-secondary: var(--colordef-dark-bg-secondary);

        --color-text-primary: var(--colordef-dark-text-primary);

        --color-text-secondary: var(--colordef-dark-text-secondary);
        --color-text-secondary-hover: var(--colordef-dark-text-secondary);
        --color-text-secondary-active: var(--colordef-dark-text-secondary-active);

        color: var(--color-text-primary);
        background-color: var(--color-bg-primary);
    }

    .lightmode,
    .inversecolormode
    {
        --color-bg-primary: var(--colordef-light-bg-primary);
        --color-bg-primary-hover: var(--colordef-light-bg-primary-hover);
        --color-bg-primary-active: var(--colordef-light-bg-secondary);

        --color-bg-primary-transparent: var(--colordef-light-bg-primary-transparent);
        --color-bg-primary-semitransparent: var(--colordef-light-bg-primary-semitransparent);
        --color-bg-primary-slightlytransparent: var(--colordef-light-bg-primary-slightlytransparent);

        --color-bg-secondary: var(--colordef-light-bg-secondary);

        --color-text-primary: var(--colordef-light-text-primary);

        --color-text-secondary: var(--colordef-light-text-secondary);
        --color-text-secondary-hover: var(--colordef-light-text-secondary);
        --color-text-secondary-active: var(--colordef-light-text-secondary-active);

        color: var(--color-text-primary);
        background-color: var(--color-bg-primary);
    }
}

.bg_filled
{
    background-color: var(--color-bg-primary);
}

.bg_secondary
{
    background-color: var(--color-bg-secondary);
}

.bg_transparent
{
    background-color: transparent;
}

.bg_media
{
    background-color: var(--colordef-bg-media);
}


/* General structure */

body,
div,
nav
{
    margin: 0;
}

.parallax_section:not(.bg_secondary, .bg_transparent, .bg_media)
{
    background-color: var(--color-bg-primary);
}

.layer0
{
    z-index: 0;
}

.layer1
{
    z-index: -1;
}

.layer2
{
    z-index: -2;
}

.layer3
{
    z-index: -3;
}

.layer4
{
    z-index: -4;
}

.col_container
{
    display: flex;
    max-width: 960px;
    margin: 0 auto;
    justify-content: center;
    flex-wrap: wrap;
}

.col_container.alignleft
{
    justify-content: flex-start;
}

.col_container.alignright
{
    justify-content: flex-end;
}

.col_container > *
{
    padding-left: 1rem;
    padding-right: 1rem;
    max-width: 100%;
    box-sizing: border-box;
}

.col1
{
    flex: 0 1 80px;
}

.col2
{
    flex: 0 1 160px;
}

.col3
{
    flex: 0 1 240px;
}

.col4
{
    flex: 0 1 320px;
}

.col5
{
    flex: 0 1 400px;
}

.col6
{
    flex: 0 1 480px;
}

.col7
{
    flex: 0 1 560px;
}

.col8
{
    flex: 0 1 640px;
}

.col9
{
    flex: 0 1 720px;
}

.col10
{
    flex: 0 1 800px;
}

.col11
{
    flex: 0 1 880px;
}

.col12
{
    flex: 0 1 960px;
}

@media (max-width: 639px)
{
    html
    {
        font-size: 0.9rem;
    }
}

@media (max-width: 359px)
{
    html
    {
        font-size: 0.85rem;
    }
}


/* Typography */

body
{
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-family: 'Brando', serif;
    font-weight: normal;
    font-variant-numeric: lining-nums;
}

h1
{
    font-size: 4rem;
    line-height: 5.25rem;
    margin: 5.25rem 0 3.5rem;
    font-family: 'Brando Sans Semi Bold', sans-serif;
    font-weight: normal;
    overflow: hidden;  /* Don't break mobile layout with long words */
}

h2
{
    font-size: 2rem;
    line-height: 3.5rem;
    margin: 3.5rem 0 1.75rem;
    font-family: 'Brando', serif;
    font-weight: normal;
}

h3
{
    font-size: 1.5rem;
    line-height: 3.5rem;
    margin: 1.75rem 0;
    font-family: 'Brando', serif;
    font-weight: bold;
}

p
{
    font-size: 1.25rem;
    line-height: 1.75rem;
    margin: 1.75rem 0;
    font-weight: normal;
}

pre,
code
{
    font-size: 1rem;
    line-height: 1.6rem;
    font-family: 'Menlo', monospace;
    font-weight: normal;
    background-color: var(--color-bg-secondary);
    padding: 0.15rem;
    white-space: pre;
}

pre,
pre > code
{
    font-size: 0.75rem;
    line-height: 0.875rem;
    background-color: transparent;
    padding: 0;
}

.x_scrollable pre
{
    display: inline-block;
}

.sans_serif
{
    font-family: 'Brando Sans Light', sans-serif;
}


/* Sketchy reimplementation of margin collapsing because the way I've done the
   layout means I can't use the native implementation. The idea here is to use
   the margincollapsable class to take away a "standard" 1.75rem of top margin
   from the first thing in a column. */

.margincollapsable + .margincollapsable h1:first-child
{
    margin-top: 3.5rem;
}

.margincollapsable + .margincollapsable h2:first-child
{
    margin-top: 1.75rem;
}

.margincollapsable + .margincollapsable h3:first-child
{
    margin-top: 0;
}

.margincollapsable + .margincollapsable p:first-child
{
    margin-top: 0;
}


/* Miscellanous element styles */

a:link,
a:visited
{
    color: var(--color-tint);
    text-decoration: none;
}

a:link:hover,
a:visited:hover
{
    color: var(--color-tint-hover);
    text-decoration: underline;
}

a:link:active,
a:visited:active
{
    color: var(--color-tint-active);
}

a.blocklink:link:hover,
a.blocklink:visited:hover
{
    background-color: var(--color-bg-primary-hover);
    text-decoration: none;
}

a.blocklink:link:active,
a.blocklink:visited:active
{
    background-color: var(--color-bg-primary-active);
}

ul,
ol
{
    margin: 1.75rem 0;
    padding-left: 3rem;
}

ul.bulletless,
ol.bulletless
{
    margin: 0;
    list-style-type: none;
}

ul.bulletless:not(.col_container > *),
ol.bulletless:not(.col_container > *)
{
    padding: 0;
}

.faded,
.faded a:link,
.faded a:visited
{
    color: var(--color-text-secondary);
}

.faded a:link:hover,
.faded a:visited:hover,
a.faded:link:hover,
a.faded:visited:hover
{
    color: var(--color-text-secondary-hover);
}

.faded a:link:active,
.faded a:visited:active,
a.faded:link:active,
a.faded:visited:active
{
    color: var(--color-text-secondary-active);
}

pre
{
    margin: 1.75rem 0;
}

.x_scrollable
{
    overflow-x: auto;
}

.center
{
    text-align: center;
}


/* Hero/header, nav, stuff at the top of the page */

header h1
{
    margin-bottom: 0;
}

#hero
{
    position: relative;
    color: var(--color-text-primary);
    display: flex;
    flex-direction: column-reverse;
    min-height: 60vh;
    text-shadow: var(--color-bg-primary-semitransparent) 0 0 1rem;
}

#hero_image
{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

#hero_image.repeat_none
{
    background-repeat: no-repeat;
    background-size: cover;
}

#hero_image.repeat_x
{
    background-repeat: repeat-x;
    background-size: auto 100%;
}

#hero_image.repeat_y
{
    background-repeat: repeat-y;
    background-size: 100% auto;
}

#hero_image.repeat_both
{
    background-repeat: repeat;
}

#hero_image.left
{
    background-position-x: left;
}

#hero_image.center
{
    background-position-x: center;
}

#hero_image.right
{
    background-position-x: right;
}

#hero_image.top
{
    background-position-y: top;
}

#hero_image.mid
{
    background-position-y: center;
}

#hero_image.bottom
{
    background-position-y: bottom;
}

#hero_gradient
{
    background-image: linear-gradient(to top, var(--color-bg-primary-slightlytransparent), var(--color-bg-primary-transparent));
}

#main_nav ul
{
    overflow: hidden;
}

#main_nav ul > li
{
    float: left;
}

#main_nav ul > li:first-child
{
    margin-left: -1rem;
}

#main_nav a
{
    display: inline-block;
    padding: 0.875rem 1rem;
}

#main_nav a:link:hover,
#main_nav a:visited:hover
{
    text-decoration: none;
}


/* Pagination, stuff at the bottom of the page */

a.pagination
{
    display: block;
    margin: 0 0 1.75rem;
    padding: 1.75rem 1rem;
    position: relative;
}

.pagination > p
{
    margin: 0;
}

.pagination.prev > p
{
    padding-left: 2rem;
}

.pagination.next > p
{
    padding-right: 2rem;
    text-align: right;
}

.pagination.prev > p:first-child::before
{
    content: '‹ ';
    display: block;
    position: absolute;
    left: 1.5rem;
    top: 50%;
    margin-top: -0.875rem;
}

.pagination.next > p:last-child::after
{
    content: ' ›';
    display: block;
    position: absolute;
    right: 1.5rem;
    top: 50%;
    margin-top: -0.875rem;
}


/* Mid-post images */

.caption
{
    font-size: 0.75rem;
    line-height: 0.875rem;
    margin: 0.875rem 0 1.75rem;
}

.image_row
{
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    padding: 0 0.5625rem;
}

.row_image
{
    height: 17.5rem;
    margin: 1.75rem 0.4375rem;
    flex-basis: 0;
}

.row_image img
{
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.margincollapsable + .image_row_section .row_image
{
    margin-top: 0;
}

.image_row_section + .image_row_section .row_image
{
    margin-top: -0.875rem;
}

.image_row_section .caption
{
    margin-top: -0.875rem;
}

.full_bleed_section
{
    display: block;
    height: 80vh;
}

.full_bleed_section img
{
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Some math notes for the parallax effect: let N be the distance between the
   browser plane and the image plane, relative to the distance between the
   browser plane and the user (e.g. 0.25 for the current "layer 1" definition).
   Let X be the height of the "gap" in the browser plane through which the
   image is viewed. Then we need to extend the image by (N/(N+1))(100vh-X) in
   the browser plane, or N(100vh-X) in the image plane, to make it long enough
   to always cover the gap as the user scrolls. */

.full_bleed_section img.layer1
{
    height: calc(0.2 * (100vh - 100%) + 100%);
}

.full_bleed_section img.layer2
{
    height: calc(0.334 * (100vh - 100%) + 100%);
}

.full_bleed_section img.layer3
{
    height: calc(0.5 * (100vh - 100%) + 100%);
}

.full_bleed_section img.layer4
{
    height: calc(0.667 * (100vh - 100%) + 100%);
}

.full_bleed_section a
{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}


/* Parallax media queries */

@supports ((perspective: 160px) and (not (-webkit-overflow-scrolling: touch)))
{
    .parallax_container
    {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        perspective: 160px;
        perspective-origin: 100% 0%;
        overflow-x: hidden;
        overflow-y: auto;
    }

    .parallax_section
    {
        position: relative;
        transform: translateZ(0);
        transform-style: preserve-3d;
    }

    .layer0
    {
        transform-origin: 100% 0%;
        transform: translateZ(0);
    }

    .layer1
    {
        transform-origin: 100% 0%;
        transform: translateZ(-40px) scale(1.25);
    }

    .layer2
    {
        transform-origin: 100% 0%;
        transform: translateZ(-80px) scale(1.5);
    }

    .layer3
    {
        transform-origin: 100% 0%;
        transform: translateZ(-160px) scale(2.0);
    }

    .layer4
    {
        transform-origin: 100% 0%;
        transform: translateZ(-320px) scale(3.0);
    }
}
